# Generated by Django 4.2.1 on 2023-05-11 18:49

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "Пользователь с таким именем уже существует!"
                        },
                        help_text="Введите юзернейм пользователя \n            (не более 150 символов)",
                        max_length=150,
                        unique=True,
                        validators=[
                            users.validators.username_pattern_validation,
                            users.validators.username_name_list_validator,
                        ],
                        verbose_name="Юзернейм",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "Пользователь с таким электронным почтовым адресом уже существует."
                        },
                        help_text="Введите электронный почтовый адрес \n            (не более 254 символов)",
                        max_length=254,
                        unique=True,
                        verbose_name="Электронный почтовый адрес",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="Придумайте пароль \n            (не более 150 символов)",
                        max_length=150,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                8,
                                "Придумайте пароль длинной от 8 до 150 символов.",
                            )
                        ],
                        verbose_name="Пароль",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Введите имя пользователя \n            (не более 150 символов)",
                        max_length=150,
                        verbose_name="Имя пользователя",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Введите фамилию пользователя \n            (не более 150 символов)",
                        max_length=150,
                        verbose_name="Фамилия пользователя",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "ordering": ("-id",),
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Follow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="following",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Подписан на автора",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="follower",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Подписка на автора",
                "verbose_name_plural": "Подписки на авторов",
            },
        ),
        migrations.AddConstraint(
            model_name="follow",
            constraint=models.UniqueConstraint(
                fields=("user", "author"), name="unique_user_author"
            ),
        ),
        migrations.AddConstraint(
            model_name="follow",
            constraint=models.CheckConstraint(
                check=models.Q(("author", models.F("user")), _negated=True),
                name="no_self_follow",
            ),
        ),
    ]
